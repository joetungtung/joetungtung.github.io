import "strings"

src_key = "RADWARE"

from(bucket: "SOC")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> filter(fn: (r) => r._field == "count")
  |> filter(fn: (r) =>
    (exists r.device_name   and strings.containsStr(v: strings.toUpper(v: r.device_name),   substr: src_key)) or
    (exists r["Agent Name"] and strings.containsStr(v: strings.toUpper(v: r["Agent Name"]), substr: src_key)) or
    (exists r.product       and strings.containsStr(v: strings.toUpper(v: r.product),       substr: src_key)) or
    (exists r.device_vendor and strings.containsStr(v: strings.toUpper(v: r.device_vendor), substr: src_key))
  )
  |> map(fn: (r) => ({
      r with src_ip:
        if exists r.src_ip then r.src_ip
        else if exists r["Source IP"] then r["Source IP"]
        else if exists r["Source Address"] then r["Source Address"]
        else if exists r.source_ip then r.source_ip
        else if exists r.source_address then r.source_address
        else if exists r.source then r.source
        else ""
    }))
  |> filter(fn: (r) => r.src_ip != "")
  |> group(columns: ["src_ip"])
  |> sum(column: "_value")
  |> rename(columns: {_value: "events"})
  |> sort(columns: ["events"], desc: true)
  |> limit(n: 10)
  |> keep(columns: ["src_ip", "events"])









import "strings"

from(bucket: "SOC")
  |> range(start: -24h)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> filter(fn: (r) =>
      (exists r.device_name   and strings.containsStr(v: strings.toUpper(v: r.device_name),   substr: "RADWARE")) or
      (exists r.product       and strings.containsStr(v: strings.toUpper(v: r.product),       substr: "RADWARE")) or
      (exists r.device_vendor and strings.containsStr(v: strings.toUpper(v: r.device_vendor), substr: "RADWARE")) or
      (exists r["Agent Name"] and strings.containsStr(v: strings.toUpper(v: r["Agent Name"]), substr: "RADWARE"))
  )
  |> limit(n: 10)
