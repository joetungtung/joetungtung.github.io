from datetime import datetime, timezone
from zoneinfo import ZoneInfo  # Python 3.9+ 內建

# 假設 End Time 是 "2025-10-23 16:43:19"
end_time_str = row["End Time"]

# 1️⃣ 明確告訴 Python 這是台北時間
local_dt = datetime.strptime(end_time_str, "%Y-%m-%d %H:%M:%S").replace(tzinfo=ZoneInfo("Asia/Taipei"))

# 2️⃣ 轉成 UTC
utc_dt = local_dt.astimezone(timezone.utc)

# 3️⃣ 寫入 Influx 時用 UTC-aware datetime
point = (
    Point("arcsight_event")
    .tag("device_name", device_name)
    .field("count", int(count))
    .time(utc_dt)   # ✅ 一定要用 UTC-aware 時間
)

write_api.write(bucket="SOC", record=point)




from(bucket: "SOC")
  |> range(start: -1h)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> limit(n: 5)





latest =
  from(bucket: "SOC")
    |> range(start: -50y, stop: time(v: "2100-01-01T00:00:00Z"))
    |> filter(fn: (r) => r._measurement == "arcsight_event")
    |> sort(columns: ["_time"], desc: true)
    |> limit(n: 1)

// delta_sec > 0 代表資料在「過去」；delta_sec < 0 代表資料在「未來」
latest
  |> map(fn: (r) => ({
        r with
        delta_sec: int(
          v: (
            float(v: uint(v: now())) - float(v: uint(v: r._time))
          ) / 1000000000.0
        )
      }))
  |> yield(name: "now_minus_time_sec")
