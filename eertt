僅台灣
import "influxdata/influxdb/schema"
import "strings"

country = "Taiwan"

// --------- SRC（攻擊端）---------
src_cases =
from(bucket: "SOC")
  |> range(start: -12h)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> schema.fieldsAsCols()
  |> filter(fn: (r) => strings.trimSpace(v: string(v: r.attacker_geo_country_name)) == country)
  // 判斷「看起來是有效座標」：存在且不是空字串/nan/null，且不是 0
  |> map(fn: (r) => ({
        r with
        _lat_ok:  exists r.src_lat and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lat)))  != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lat)))  != "nan" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lat)))  != "null" and (if exists r.src_lat then (float(v: string(v: r.src_lat)) != 0.0) else false),
        _lon_ok:  exists r.src_lon and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lon)))  != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lon)))  != "nan" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lon)))  != "null" and (if exists r.src_lon then (float(v: string(v: r.src_lon)) != 0.0) else false)
  }))
  |> map(fn: (r) => ({
        r with
        _case: if (r._lat_ok and r._lon_ok) then "present"
               else if (not r._lat_ok and not r._lon_ok) then "both_missing"
               else if (not r._lat_ok) then "lat_missing"
               else "lon_missing",
        _cnt: 1
  }))
  |> group(columns: ["_case"])
  |> sum(column: "_cnt")
  |> map(fn: (r) => ({ role: "src", case: r._case, count: r._cnt }))
  |> keep(columns: ["role","case","count"])

// --------- DST（目標端）---------
dst_cases =
from(bucket: "SOC")
  |> range(start: -12h)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> schema.fieldsAsCols()
  |> filter(fn: (r) => strings.trimSpace(v: string(v: r.target_geo_country_name)) == country)
  |> map(fn: (r) => ({
        r with
        _lat_ok:  exists r.dst_lat and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lat)))  != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lat)))  != "nan" and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lat)))  != "null" and (if exists r.dst_lat then (float(v: string(v: r.dst_lat)) != 0.0) else false),
        _lon_ok:  exists r.dst_lon and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lon)))  != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lon)))  != "nan" and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lon)))  != "null" and (if exists r.dst_lon then (float(v: string(v: r.dst_lon)) != 0.0) else false)
  }))
  |> map(fn: (r) => ({
        r with
        _case: if (r._lat_ok and r._lon_ok) then "present"
               else if (not r._lat_ok and not r._lon_ok) then "both_missing"
               else if (not r._lat_ok) then "lat_missing"
               else "lon_missing",
        _cnt: 1
  }))
  |> group(columns: ["_case"])
  |> sum(column: "_cnt")
  |> map(fn: (r) => ({ role: "dst", case: r._case, count: r._cnt }))
  |> keep(columns: ["role","case","count"])

union(tables: [src_cases, dst_cases])
  |> sort(columns: ["role","count","case"], desc: true)






不分國家
import "influxdata/influxdb/schema"
import "strings"

base =
from(bucket: "SOC")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)   // 或改 -12h
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> schema.fieldsAsCols()

// ---------- SRC ----------
src_cases =
base
  |> map(fn: (r) => ({
        r with
        _lat_ok:  exists r.src_lat and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lat)))  != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lat)))  != "nan" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lat)))  != "null" and (if exists r.src_lat then (float(v: string(v: r.src_lat)) != 0.0) else false),
        _lon_ok:  exists r.src_lon and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lon)))  != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lon)))  != "nan" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lon)))  != "null" and (if exists r.src_lon then (float(v: string(v: r.src_lon)) != 0.0) else false)
  }))
  |> map(fn: (r) => ({
        r with
        _case: if (r._lat_ok and r._lon_ok) then "present"
               else if (not r._lat_ok and not r._lon_ok) then "both_missing"
               else if (not r._lat_ok) then "lat_missing"
               else "lon_missing",
        _cnt: 1
  }))
  |> group(columns: ["_case"])
  |> sum(column: "_cnt")
  |> map(fn: (r) => ({ role: "src", case: r._case, count: r._cnt }))
  |> keep(columns: ["role","case","count"])

// ---------- DST ----------
dst_cases =
base
  |> map(fn: (r) => ({
        r with
        _lat_ok:  exists r.dst_lat and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lat)))  != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lat)))  != "nan" and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lat)))  != "null" and (if exists r.dst_lat then (float(v: string(v: r.dst_lat)) != 0.0) else false),
        _lon_ok:  exists r.dst_lon and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lon)))  != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lon)))  != "nan" and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lon)))  != "null" and (if exists r.dst_lon then (float(v: string(v: r.dst_lon)) != 0.0) else false)
  }))
  |> map(fn: (r) => ({
        r with
        _case: if (r._lat_ok and r._lon_ok) then "present"
               else if (not r._lat_ok and not r._lon_ok) then "both_missing"
               else if (not r._lat_ok) then "lat_missing"
               else "lon_missing",
        _cnt: 1
  }))
  |> group(columns: ["_case"])
  |> sum(column: "_cnt")
  |> map(fn: (r) => ({ role: "dst", case: r._case, count: r._cnt }))
  |> keep(columns: ["role","case","count"])

union(tables: [src_cases, dst_cases])
  |> sort(columns: ["role","count","case"], desc: true)









import "influxdata/influxdb/schema"
import "strings"

// === 把整個查詢包成一個函式，只輸出一次 ===
wide = () => {
  base =
    from(bucket: "SOC")
      |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
      |> filter(fn: (r) => r._measurement == "arcsight_event")
      |> schema.fieldsAsCols()
      // 先丟掉容易殘留在 group key 的欄位，避免分成多個 frame
      |> drop(columns: ["_start","_stop","_measurement"])

  // ---------- SRC by country ----------
  src_by_country =
    base
      |> map(fn: (r) => ({
          r with
          country: strings.trimSpace(v: string(v: r.attacker_geo_country_name)),
          _lat_ok: exists r.src_lat and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lat))) != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lat))) != "nan" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lat))) != "null" and (if exists r.src_lat then (float(v: string(v: r.src_lat)) != 0.0) else false),
          _lon_ok: exists r.src_lon and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lon))) != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lon))) != "nan" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lon))) != "null" and (if exists r.src_lon then (float(v: string(v: r.src_lon)) != 0.0) else false),
      }))
      |> filter(fn: (r) => exists r.country and r.country != "")
      |> map(fn: (r) => ({
          r with
          case: if (r._lat_ok and r._lon_ok) then "present"
                else if (not r._lat_ok and not r._lon_ok) then "both_missing"
                else if (not r._lat_ok) then "lat_missing"
                else "lon_missing",
          _cnt: 1
      }))
      |> group(columns: ["country","case"])
      |> sum(column: "_cnt")
      |> map(fn: (r) => ({ country: r.country, role: "src", case: r.case, count: r._cnt }))
      |> keep(columns: ["country","role","case","count"])

  // ---------- DST by country ----------
  dst_by_country =
    base
      |> map(fn: (r) => ({
          r with
          country: strings.trimSpace(v: string(v: r.target_geo_country_name)),
          _lat_ok: exists r.dst_lat and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lat))) != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lat))) != "nan" and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lat))) != "null" and (if exists r.dst_lat then (float(v: string(v: r.dst_lat)) != 0.0) else false),
          _lon_ok: exists r.dst_lon and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lon))) != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lon))) != "nan" and strings.toLower(v: strings.trimSpace(v: string(v: r.dst_lon))) != "null" and (if exists r.dst_lon then (float(v: string(v: r.dst_lon)) != 0.0) else false),
      }))
      |> filter(fn: (r) => exists r.country and r.country != "")
      |> map(fn: (r) => ({
          r with
          case: if (r._lat_ok and r._lon_ok) then "present"
                else if (not r._lat_ok and not r._lon_ok) then "both_missing"
                else if (not r._lat_ok) then "lat_missing"
                else "lon_missing",
          _cnt: 1
      }))
      |> group(columns: ["country","case"])
      |> sum(column: "_cnt")
      |> map(fn: (r) => ({ country: r.country, role: "dst", case: r.case, count: r._cnt }))
      |> keep(columns: ["country","role","case","count"])

  // ---------- 合併 → pivot 成寬表 ----------
  union(tables: [src_by_country, dst_by_country])
    |> group(columns: ["country","role"]) // 收斂 group key
    |> pivot(rowKey: ["country","role"], columnKey: ["case"], valueColumn: "count")
    |> group()                            // 完全去 key，讓 Grafana 只得到一張表
    |> map(fn: (r) => ({
        r with
        present:       if exists r.present then r.present else 0,
        both_missing:  if exists r.both_missing then r.both_missing else 0,
        lat_missing:   if exists r.lat_missing then r.lat_missing else 0,
        lon_missing:   if exists r.lon_missing then r.lon_missing else 0,
    }))
    |> map(fn: (r) => ({
        r with
        total: r.present + r.both_missing + r.lat_missing + r.lon_missing,
        present_ratio: if (r.present + r.both_missing + r.lat_missing + r.lon_missing) > 0
                       then float(v: r.present) / float(v: r.total)
                       else 0.0
    }))
    |> keep(columns: ["country","role","present","both_missing","lat_missing","lon_missing","total","present_ratio"])
    |> sort(columns: ["present_ratio","present","total","country","role"], desc: true)
    |> limit(n: 200)
}

// 只輸出一次結果，避免 _result 名稱衝突
wide()
  |> yield(name: "wide")





