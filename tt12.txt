import "influxdata/influxdb/schema"

// ===== 只取「目的地 = 台灣」且座標合理的基礎資料 =====
base =
  from(bucket: "SOC")
    |> range(start: -12h)                                      // 視需要調整時間窗
    |> filter(fn: (r) => r._measurement == "arcsight_event")
    |> schema.fieldsAsCols()
    |> keep(columns: ["_time","src_lat","src_lon","dst_lat","dst_lon","target_geo_country_name"])
    // 文字國別先卡「Taiwan」
    |> filter(fn: (r) => r.target_geo_country_name == "Taiwan")
    // 轉成數值，避免字串/NaN
    |> map(fn: (r) => ({
      r with
      src_lat: float(v: r.src_lat), src_lon: float(v: r.src_lon),
      dst_lat: float(v: r.dst_lat), dst_lon: float(v: r.dst_lon),
    }))
    // 台灣經緯度外框（保留合理的「目的地在台灣」）
    |> filter(fn: (r) =>
      r.dst_lat >= 21.5 and r.dst_lat <= 25.5 and
      r.dst_lon >= 119.5 and r.dst_lon <= 122.5 and
      r.src_lat != 0.0 and r.src_lon != 0.0 and
      r.src_lat >= -90.0 and r.src_lat <= 90.0 and
      r.src_lon >= -180.0 and r.src_lon <= 180.0
    )

// ===== 把每筆變成兩個節點（來源/目的），並加上同一條線的 route_id、節點順序 hop =====
src =
  base
    |> map(fn: (r) => ({
      r with
      hop: 0,
      latitude:  r.src_lat,
      longitude: r.src_lon,
      route_id:  string(v: r.src_lat) + "," + string(v: r.src_lon) + " => " +
                 string(v: r.dst_lat) + "," + string(v: r.dst_lon),
    }))

dst =
  base
    |> map(fn: (r) => ({
      r with
      hop: 1,
      latitude:  r.dst_lat,
      longitude: r.dst_lon,
      route_id:  string(v: r.src_lat) + "," + string(v: r.src_lon) + " => " +
                 string(v: r.dst_lat) + "," + string(v: r.dst_lon),
    }))

// ===== 合併成路徑；只允許「起點不在台灣、終點在台灣」的兩點組合 =====
routes =
  union(tables: [src, dst])
    // 保險：再次檢查點位是否符合起點/終點條件
    |> map(fn: (r) => ({
      r with
      in_tw:  (r.latitude >= 21.5 and r.latitude <= 25.5) and
              (r.longitude >= 119.5 and r.longitude <= 122.5)
    }))
    |> filter(fn: (r) =>
      (r.hop == 0 and r.in_tw == false) or
      (r.hop == 1 and r.in_tw == true)
    )
    // 每條 route_id 只要最新一對點（避免過多折線）
    |> group(columns: ["route_id", "hop"])
    |> window(every: 5m)
    |> tail(n: 1)
    |> window(every: inf)
    |> group(columns: ["route_id"])
    |> sort(columns: ["hop"], desc: false)
    |> keep(columns: ["_time","latitude","longitude","hop","route_id"])
    |> limit(n: 2000)

routes