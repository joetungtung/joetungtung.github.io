# country_aliases.py
# 你可以自由擴充這兩個 dict；鍵值區分大小寫與否由 geo_fixes 會幫你處理

# 國名正名表（別名 → 正名）
_ALIASES = {
    "roc": "Taiwan",
    "republic of china": "Taiwan",
    "taiwan, province of china": "Taiwan",
    "macao": "Macau",
    "macau sar": "Macau",
    "seychelles": "Seychelles",
    "mauritius": "Mauritius",
    # 想到再加…（鍵建議用小寫，geo_fixes 會 lower 再比）
}

# 正名 → (lat, lon)
_BUILTIN_COUNTRIES = {
    "Taiwan":    (23.6978, 120.9605),
    "Macau":     (22.1987, 113.5439),
    "Mauritius": (-20.3484, 57.5522),
    "Seychelles":(-4.6796, 55.4920),
    # 常用的也可以加
    "United States": (39.7837, -100.4459),
    "Japan":    (36.2048, 138.2529),
    "China":    (35.8617, 104.1954),
    # …持續擴充
}




# geo_fixes.py
import pandas as pd
import numpy as np
from typing import Optional, Tuple
from country_aliases import _BUILTIN_COUNTRIES, _ALIASES

def _normalize_country(name: Optional[str]) -> Optional[str]:
    if name is None:
        return None
    s = str(name).strip()
    if s == "" or s.lower() in ("nan", "none", "null", "unknown"):
        return None
    # 先用別名表（小寫比對）
    alias = _ALIASES.get(s.lower())
    return alias if alias else s

def _coords_for_country(country: Optional[str]) -> Optional[Tuple[float,float]]:
    if not country:
        return None
    return _BUILTIN_COUNTRIES.get(country)

def _is_bad_coord(x) -> bool:
    # 空、NaN、空字串或 0 都視為無效
    if x is None:
        return True
    try:
        f = float(x)
        return np.isnan(f) or f == 0.0
    except Exception:
        return True

def apply_geo_fixes_df(df: pd.DataFrame) -> pd.DataFrame:
    """
    規則：
    1) 正規化國名：attacker_geo_country_name / target_geo_country_name 用 _ALIASES 轉正
    2) 若 src_lat/lon 缺或無效，且來源國名可查到經緯度 → 用該國中心點回填
    3) 若 dst_lat/lon 缺或無效，且目標國名可查到經緯度 → 用該國中心點回填
    * 不會覆蓋原本已經是有效數字的經緯度
    """
    df = df.copy()

    # 確保欄位存在
    for c in ["attacker_geo_country_name","target_geo_country_name",
              "src_lat","src_lon","dst_lat","dst_lon"]:
        if c not in df.columns:
            df[c] = pd.NA

    # 1) 國名正規化
    df["attacker_geo_country_name"] = df["attacker_geo_country_name"].map(_normalize_country)
    df["target_geo_country_name"]   = df["target_geo_country_name"].map(_normalize_country)

    # 2) 補來源座標
    def _fill_src(row):
        lat, lon = row.get("src_lat"), row.get("src_lon")
        if _is_bad_coord(lat) or _is_bad_coord(lon):
            cc = row.get("attacker_geo_country_name")
            coords = _coords_for_country(cc)
            if coords:
                row["src_lat"], row["src_lon"] = coords[0], coords[1]
        return row

    # 3) 補目標座標
    def _fill_dst(row):
        lat, lon = row.get("dst_lat"), row.get("dst_lon")
        if _is_bad_coord(lat) or _is_bad_coord(lon):
            cc = row.get("target_geo_country_name")
            coords = _coords_for_country(cc)
            if coords:
                row["dst_lat"], row["dst_lon"] = coords[0], coords[1]
        return row

    if "src_lat" in df.columns and "src_lon" in df.columns:
        df = df.apply(_fill_src, axis=1)
    if "dst_lat" in df.columns and "dst_lon" in df.columns:
        df = df.apply(_fill_dst, axis=1)

    return df
