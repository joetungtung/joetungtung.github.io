# ============== GEO 修補：DataFrame 版（任何國家都會回填） ==============
# 可選：補一些常見別名；不會覆蓋你原本已有的 ALIASES
ALIASES.update({
    "U.S.A.": "United States",
    "USA": "United States",
    "UK": "United Kingdom",
    "Hong Kong, SAR": "Hong Kong",
    "Viet Nam": "Vietnam",
    "Republic of Korea": "South Korea",
    "Korea, Republic of": "South Korea",
    "Russian Federation": "Russia",
    "Taiwan, Province of China": "Taiwan",
    "ROC": "Taiwan",
    "TWN": "Taiwan",
})

def apply_geo_fixes_df(df):
    import pandas as pd

    # --- helpers ---
    def norm(s):
        if pd.isna(s):
            return None
        return " ".join(str(s).strip().split())

    alias_lower = {str(k).lower(): v for k, v in ALIASES.items()}

    def normalize_country(val):
        if val is None or (isinstance(val, float) and pd.isna(val)):
            return None
        t = norm(val)
        if not t:
            return None
        return ALIASES.get(t, alias_lower.get(t.lower(), t))

    def pick_col(candidates):
        for c in candidates:
            if c in df.columns:
                return c
        return None

    def ensure_col(name):
        if name not in df.columns:
            df[name] = pd.NA
        return name

    def fill_side(country_candidates, lat_candidates, lon_candidates):
        # 找到實際的國名欄位；沒有就跳過
        ccol = pick_col(country_candidates)
        if not ccol:
            return

        # 正規化國名
        df[ccol] = df[ccol].map(normalize_country)

        # 緯度/經度欄位：有就用、沒有就建立預設名
        lcol = pick_col(lat_candidates) or ensure_col(lat_candidates[0])
        rcol = pick_col(lon_candidates) or ensure_col(lon_candidates[0])

        # 型別轉成數值，非數字->NaN
        df[lcol] = pd.to_numeric(df[lcol], errors="coerce")
        df[rcol] = pd.to_numeric(df[rcol], errors="coerce")

        # 準備國名 -> (lat/lon) 對照
        lat_map = {k: float(v[0]) for k, v in BUILTIN_COUNTRIES.items()
                   if isinstance(v, (tuple, list)) and len(v) == 2}
        lon_map = {k: float(v[1]) for k, v in BUILTIN_COUNTRIES.items()
                   if isinstance(v, (tuple, list)) and len(v) == 2}

        country_series = df[ccol]

        # 需要回填的條件：NaN 或 0
        need_lat = df[lcol].isna() | (df[lcol] == 0.0)
        need_lon = df[rcol].isna() | (df[rcol] == 0.0)

        df.loc[need_lat, lcol] = country_series.map(lat_map)
        df.loc[need_lon, rcol] = country_series.map(lon_map)

    # src / dst 都處理；包含常見欄位名的候選清單
    fill_side(
        country_candidates=["src_country", "attacker_geo_country_name", "src_geo_country_name"],
        lat_candidates=["src_lat", "src_geo_lat", "src_geo_latitude"],
        lon_candidates=["src_lon", "src_geo_lon", "src_geo_longitude"],
    )
    fill_side(
        country_candidates=["dst_country", "target_geo_country_name", "dst_geo_country_name"],
        lat_candidates=["dst_lat", "dst_geo_lat", "dst_geo_latitude"],
        lon_candidates=["dst_lon", "dst_geo_lon", "dst_geo_longitude"],
    )

    return df
# ========================== GEO 修補：結束 ==========================






# --- 寫入前：對 DataFrame 做 GEO 修補 ---
df = apply_geo_fixes_df(df)   # <<< 加這一行

write_api.write(
    bucket=BUCKET,
    org=ORG,
    record=df,
    data_frame_measurement_name="arcsight_event",
    data_frame_tag_columns=tag_cols,
    data_frame_timestamp_column="event_ts",
)