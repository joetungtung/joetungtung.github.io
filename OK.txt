FW 每分鐘事件量（Time series）
import "strings"

src = "FW"  // ← 這個面板抓 FW

from(bucket: "SOC")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> filter(fn: (r) => r._field == "count")
  |> filter(fn: (r) =>
      (exists r.device_name   and strings.containsStr(v: strings.toUpper(v: r.device_name),   substr: src)) or
      (exists r["Agent Name"] and strings.containsStr(v: strings.toUpper(v: r["Agent Name"]), substr: src)) or
      (exists r.product       and strings.containsStr(v: strings.toUpper(v: r.product),       substr: src)) or
      (exists r.device_vendor and strings.containsStr(v: strings.toUpper(v: r.device_vendor), substr: src))
  )
  |> map(fn: (r) => ({ r with _value: float(v: r._value) }))
  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: false)
  |> group(columns: ["device_name"])          // 想要總和就改成 group(columns: ["_field"])
  |> keep(columns: ["_time","_value","device_name"])
  |> yield(name: "FW_events_per_min")
|> aggregateWindow(every: 5m, fn: sum, createEmpty: false) 


面板 2：WAF 每分鐘事件量
import "strings"

src = "WAF"

from(bucket: "SOC")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> filter(fn: (r) => r._field == "count")
  |> filter(fn: (r) =>
      (exists r.device_name   and strings.containsStr(v: strings.toUpper(v: r.device_name),   substr: src)) or
      (exists r["Agent Name"] and strings.containsStr(v: strings.toUpper(v: r["Agent Name"]), substr: src)) or
      (exists r.product       and strings.containsStr(v: strings.toUpper(v: r.product),       substr: src)) or
      (exists r.device_vendor and strings.containsStr(v: strings.toUpper(v: r.device_vendor), substr: src))
  )
  |> map(fn: (r) => ({ r with _value: float(v: r._value) }))
  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: false)
  |> group(columns: ["device_name"])
  |> keep(columns: ["_time","_value","device_name"])
  |> yield(name: "WAF_events_per_min")


RADWARE 每分鐘事件量
import "strings"

src = "RADWARE"

from(bucket: "SOC")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> filter(fn: (r) => r._field == "count")
  |> filter(fn: (r) =>
      (exists r.device_name   and strings.containsStr(v: strings.toUpper(v: r.device_name),   substr: src)) or
      (exists r["Agent Name"] and strings.containsStr(v: strings.toUpper(v: r["Agent Name"]), substr: src)) or
      (exists r.product       and strings.containsStr(v: strings.toUpper(v: r.product),       substr: src)) or
      (exists r.device_vendor and strings.containsStr(v: strings.toUpper(v: r.device_vendor), substr: src))
  )
  |> map(fn: (r) => ({ r with _value: float(v: r._value) }))
  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: false)
  |> group(columns: ["device_name"])
  |> keep(columns: ["_time","_value","device_name"])
  |> yield(name: "RADWARE_events_per_min")




Top 10 攻擊類型
from(bucket: "SOC")
  |> range(start: -24h)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> filter(fn: (r) => r._field == "count")
  |> group(columns: ["rule_name"])
  |> sum(column: "_value")
  |> sort(columns: ["_value"], desc: true)
  |> limit(n: 10)



防禦設備事件佔比
from(bucket: "SOC")
  |> range(start: -24h)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> filter(fn: (r) => r._field == "count")
  |> group(columns: ["device_vendor"])
  |> sum(column: "_value")
  |> sort(columns: ["_value"], desc: true)




Top 10 攻擊手法 (event_name)」橫條圖
from(bucket: "SOC")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> filter(fn: (r) => r._field == "count")          // 事件次數
  |> filter(fn: (r) => exists r.event_name)          // 若沒有這欄改成 rule_name
  |> group(columns: ["event_name"])
  |> sum(column: "_value")
  |> rename(columns: {_value: "events"})
  |> sort(columns: ["events"], desc: true)
  |> limit(n: 10)
  |> keep(columns: ["event_name","events"])


import "influxdata/influxdb/schema"
schema.tagKeys(bucket: "SOC", predicate: (r) => r._measurement == "arcsight_event")
  |> yield(name: "tags")


