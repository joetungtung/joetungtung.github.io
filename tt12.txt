import "influxdata/influxdb/schema"

base =
  from(bucket: "SOC")
    |> range(start: -12h)
    |> filter(fn: (r) => r._measurement == "arcsight_event")
    |> schema.fieldsAsCols()
    |> keep(columns: ["_time","attacker_geo_country_name","target_geo_country_name","src_lat","src_lon","dst_lat","dst_lon"])
    // 只看目標=台灣
    |> filter(fn: (r) => r.target_geo_country_name == "Taiwan")

tot   = base |> count(column: "_time") |> rename(columns: {_value:"rows_total"})
missS = base |> filter(fn: (r) => not exists r.src_lat or not exists r.src_lon or r.src_lat == 0.0 or r.src_lon == 0.0)
             |> count(column: "_time") |> rename(columns: {_value:"rows_missing_src"})
missD = base |> filter(fn: (r) => not exists r.dst_lat or not exists r.dst_lon or r.dst_lat == 0.0 or r.dst_lon == 0.0)
             |> count(column: "_time") |> rename(columns: {_value:"rows_missing_dst"})

// 各來源國家有缺的統計（看是哪些國家沒座標）
byCountry =
  base
    |> map(fn: (r) => ({
      r with
      missing_src: if (not exists r.src_lat or not exists r.src_lon or r.src_lat == 0.0 or r.src_lon == 0.0) then 1 else 0,
      missing_dst: if (not exists r.dst_lat or not exists r.dst_lon or r.dst_lat == 0.0 or r.dst_lon == 0.0) then 1 else 0,
    }))
    |> group(columns: ["attacker_geo_country_name"])
    |> sum(columns: ["missing_src","missing_dst"])
    |> rename(columns: {attacker_geo_country_name:"country"})

union(tables: [tot, missS, missD, byCountry])






# --- 把國名補成座標（若欄位缺失或為 0 才補） ---
def _norm_country(name: str) -> str:
    if not name:
        return ""
    k = str(name).strip()
    # 先走 alias，再回到原名
    return ALIASES.get(k, k)

def _patch_coord_cols(df, prefix, country_col):
    lat_col = f"{prefix}_lat"
    lon_col = f"{prefix}_lon"
    # 確保欄位存在
    if lat_col not in df.columns: df[lat_col] = np.nan
    if lon_col not in df.columns: df[lon_col] = np.nan

    def _fill(row):
        lat = row[lat_col]
        lon = row[lon_col]
        if (pd.isna(lat) or float(lat) == 0.0) or (pd.isna(lon) or float(lon) == 0.0):
            cname = _norm_country(row.get(country_col, ""))
            if cname in BUILTIN_COUNTRIES:
                c_lat, c_lon = BUILTIN_COUNTRIES[cname]
                if pd.isna(lat) or float(lat) == 0.0:
                    row[lat_col] = float(c_lat)
                if pd.isna(lon) or float(lon) == 0.0:
                    row[lon_col] = float(c_lon)
        return row

    return df.apply(_fill, axis=1)

# 來源：用 attacker_geo_country_name 補 src_lat/src_lon
df = _patch_coord_cols(df, prefix="src", country_col="attacker_geo_country_name")
# 目的：用 target_geo_country_name 補 dst_lat/dst_lon
df = _patch_coord_cols(df, prefix="dst", country_col="target_geo_country_name")

# 型別保險（避免 422）
for c in ["src_lat","src_lon","dst_lat","dst_lon"]:
    df[c] = pd.to_numeric(df[c], errors="coerce").astype("float64")