import "influxdata/influxdb/schema"

from(bucket: "SOC")
  |> range(start: -12h)                          // 時窗你可改
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> schema.fieldsAsCols()
  |> keep(columns: [
    "_time",
    "attacker_geo_country_name",
    "target_geo_country_name",
    "src_lat","src_lon","dst_lat","dst_lon"
  ])
  // 先把可能是字串/空值的經緯度轉成數字，沒有就設 0
  |> map(fn: (r) => ({
        r with
        src_lat_f: if exists r.src_lat then float(v: r.src_lat) else 0.0,
        src_lon_f: if exists r.src_lon then float(v: r.src_lon) else 0.0,
        dst_lat_f: if exists r.dst_lat then float(v: r.dst_lat) else 0.0,
        dst_lon_f: if exists r.dst_lon then float(v: r.dst_lon) else 0.0
  }))
  // 打標示：來源/目的的座標是否齊全
  |> map(fn: (r) => ({
        r with
        src_ok: (r.src_lat_f != 0.0 and r.src_lon_f != 0.0),
        dst_ok: (r.dst_lat_f != 0.0 and r.dst_lon_f != 0.0)
  }))
  // 只看「有缺」的
  |> filter(fn: (r) => r.src_ok == false or r.dst_ok == false)
  |> keep(columns: [
    "_time",
    "attacker_geo_country_name","target_geo_country_name",
    "src_lat_f","src_lon_f","dst_lat_f","dst_lon_f",
    "src_ok","dst_ok"
  ])
  |> sort(columns: ["_time"], desc: true)
  |> limit(n: 200)







import "influxdata/influxdb/schema"

base =
  from(bucket: "SOC")
    |> range(start: -12h)
    |> filter(fn: (r) => r._measurement == "arcsight_event")
    |> schema.fieldsAsCols()
    |> keep(columns: [
      "attacker_geo_country_name",
      "target_geo_country_name",
      "src_lat","src_lon","dst_lat","dst_lon"
    ])
    |> map(fn: (r) => ({
          r with
          src_lat_f: if exists r.src_lat then float(v: r.src_lat) else 0.0,
          src_lon_f: if exists r.src_lon then float(v: r.src_lon) else 0.0,
          dst_lat_f: if exists r.dst_lat then float(v: r.dst_lat) else 0.0,
          dst_lon_f: if exists r.dst_lon then float(v: r.dst_lon) else 0.0
    }))
    |> map(fn: (r) => ({
          r with
          src_ok: (r.src_lat_f != 0.0 and r.src_lon_f != 0.0),
          dst_ok: (r.dst_lat_f != 0.0 and r.dst_lon_f != 0.0)
    }))

// 如只想看「目標=台灣」就打開下一行：
  // |> filter(fn: (r) => r.target_geo_country_name == "Taiwan")

base
  |> group(columns: ["attacker_geo_country_name","target_geo_country_name"])
  |> reduce(
      identity: {missing: 0, total: 0},
      fn: (acc, r) => ({
          missing: acc.missing + (if r.src_ok and r.dst_ok then 0 else 1),
          total:   acc.total   + 1
      })
  )
  |> map(fn: (r) => ({ r with miss_ratio: if r.total > 0 then float(v: r.missing) / float(v: r.total) else 0.0 }))
  |> sort(columns: ["missing"], desc: true)
  |> limit(n: 50)









# --- 把國名補成座標（若欄位缺失或為 0 才補） ---
def _norm_country(name: str) -> str:
    if not name:
        return ""
    k = str(name).strip()
    # 先走 alias，再回到原名
    return ALIASES.get(k, k)

def _patch_coord_cols(df, prefix, country_col):
    lat_col = f"{prefix}_lat"
    lon_col = f"{prefix}_lon"
    # 確保欄位存在
    if lat_col not in df.columns: df[lat_col] = np.nan
    if lon_col not in df.columns: df[lon_col] = np.nan

    def _fill(row):
        lat = row[lat_col]
        lon = row[lon_col]
        if (pd.isna(lat) or float(lat) == 0.0) or (pd.isna(lon) or float(lon) == 0.0):
            cname = _norm_country(row.get(country_col, ""))
            if cname in BUILTIN_COUNTRIES:
                c_lat, c_lon = BUILTIN_COUNTRIES[cname]
                if pd.isna(lat) or float(lat) == 0.0:
                    row[lat_col] = float(c_lat)
                if pd.isna(lon) or float(lon) == 0.0:
                    row[lon_col] = float(c_lon)
        return row

    return df.apply(_fill, axis=1)

# 來源：用 attacker_geo_country_name 補 src_lat/src_lon
df = _patch_coord_cols(df, prefix="src", country_col="attacker_geo_country_name")
# 目的：用 target_geo_country_name 補 dst_lat/dst_lon
df = _patch_coord_cols(df, prefix="dst", country_col="target_geo_country_name")

# 型別保險（避免 422）
for c in ["src_lat","src_lon","dst_lat","dst_lon"]:
    df[c] = pd.to_numeric(df[c], errors="coerce").astype("float64")