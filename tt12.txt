import "influxdata/influxdb/schema"

// ===== 基底：取 arcsight_event，展開欄位成直欄 =====
base =
  from(bucket: "SOC")
    |> range(start: -12h)                           // ← 時窗自己調
    |> filter(fn: (r) => r._measurement == "arcsight_event")
    |> schema.fieldsAsCols()
    // 只保留我們需要的四個座標欄
    |> keep(columns: ["_time","src_lat","src_lon","dst_lat","dst_lon","target_geo_country_name"])
    // 需要的話打開下一行：只看「目的地=台灣」
    // |> filter(fn: (r) => r.target_geo_country_name == "Taiwan")
    // 轉 float，避免字串/NaN 造成下游報錯
    |> map(fn: (r) => ({
        r with
        src_lat: float(v: r.src_lat),
        src_lon: float(v: r.src_lon),
        dst_lat: float(v: r.dst_lat),
        dst_lon: float(v: r.dst_lon),
      }))
    // 基本合理性：不得為 0，且落在合法經緯度範圍
    |> filter(fn: (r) =>
        r.src_lat != 0.0 and r.src_lon != 0.0 and
        r.dst_lat != 0.0 and r.dst_lon != 0.0 and
        r.src_lat >= -90.0 and r.src_lat <= 90.0 and
        r.dst_lat >= -90.0 and r.dst_lat <= 90.0 and
        r.src_lon >= -180.0 and r.src_lon <= 180.0 and
        r.dst_lon >= -180.0 and r.dst_lon <= 180.0
      )

// ===== 拆成兩列：來源點(hop=0) 與 目的點(hop=1)，並產生 route_id =====
src =
  base
    |> map(fn: (r) => ({
      _time: r._time,
      latitude:  r.src_lat,
      longitude: r.src_lon,
      hop: 0,
      route_id: string(v: r.src_lat) + "," + string(v: r.src_lon) + "=>" +
                string(v: r.dst_lat) + "," + string(v: r.dst_lon),
    }))

dst =
  base
    |> map(fn: (r) => ({
      _time: r._time,
      latitude:  r.dst_lat,
      longitude: r.dst_lon,
      hop: 1,
      route_id: string(v: r.src_lat) + "," + string(v: r.src_lon) + "=>" +
                string(v: r.dst_lat) + "," + string(v: r.dst_lon),
    }))

// ===== 合併；每條路徑只留「最近」一對點（hop=0/1 各 1 筆）=====
// 這裡只用 sort + limit，避免 _value/aggregate 相關錯誤
routes =
  union(tables: [src, dst])
    |> group(columns: ["route_id","hop"])
    |> sort(columns: ["_time"], desc: true)
    |> limit(n: 1)
    |> group()  // 打平方便 Grafana 使用
    |> keep(columns: ["_time","latitude","longitude","hop","route_id"])
    |> limit(n: 5000)   // 防止一次回太多點，可再調

routes