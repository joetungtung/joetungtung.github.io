from(bucket: "SOC")
  |> range(start: -12h)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> filter(fn: (r) => r.target_geo_country_name == "Taiwan")
  |> group(columns: ["attacker_geo_country_name"])
  |> count()
  |> rename(columns: {_value: "events"})
  |> keep(columns: ["attacker_geo_country_name", "events"])
  |> sort(columns: ["events"], desc: true)
  |> limit(n: 50)






import "influxdata/influxdb/schema"

from(bucket: "SOC")
  |> range(start: -12h)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> filter(fn: (r) => r.target_geo_country_name == "Taiwan")   // 保留「目標=台灣」
  |> schema.fieldsAsCols()
  |> filter(fn: (r) =>
      exists r.src_lat and exists r.src_lon and exists r.dst_lat and exists r.dst_lon and
      r.src_lat != 0.0 and r.src_lon != 0.0 and r.dst_lat != 0.0 and r.dst_lon != 0.0
    )
  |> keep(columns: ["_time","attacker_geo_country_name","src_lat","src_lon","dst_lat","dst_lon"])
  |> limit(n: 100)








import "influxdata/influxdb/schema"

// 先把資料整成我們要的欄位與型別
base =
  from(bucket: "SOC")
    |> range(start: -12h)                                   // 視需要調時間
    |> filter(fn: (r) => r._measurement == "arcsight_event")
    |> filter(fn: (r) => r.target_geo_country_name == "Taiwan") // 只保留「目的=台灣」
    |> schema.fieldsAsCols()
    |> keep(columns: ["_time","src_lat","src_lon","dst_lat","dst_lon"])
    |> map(fn: (r) => ({
        r with
        src_lat: float(v: r.src_lat),
        src_lon: float(v: r.src_lon),
        dst_lat: float(v: r.dst_lat),
        dst_lon: float(v: r.dst_lon),
      }))
    |> filter(fn: (r) =>
        exists r.src_lat and exists r.src_lon and exists r.dst_lat and exists r.dst_lon and
        r.src_lat != 0.0 and r.src_lon != 0.0 and r.dst_lat != 0.0 and r.dst_lon != 0.0
      )

// 拆成來源點 / 目的點兩段（hop=0/1），並建立 route_id（同一條路徑的鍵）
src =
  base
    |> map(fn: (r) => ({
        r with
        hop: 0,
        latitude:  r.src_lat,
        longitude: r.src_lon,
        route_id:  string(v: r.src_lat) + "," + string(v: r.src_lon) + "=>" +
                   string(v: r.dst_lat) + "," + string(v: r.dst_lon),
      }))

dst =
  base
    |> map(fn: (r) => ({
        r with
        hop: 1,
        latitude:  r.dst_lat,
        longitude: r.dst_lon,
        route_id:  string(v: r.src_lat) + "," + string(v: r.src_lon) + "=>" +
                   string(v: r.dst_lat) + "," + string(v: r.dst_lon),
      }))

// 合併；依 route 分組，並確保「來源在前、目的在後」
routes =
  union(tables: [src, dst])
    |> group(columns: ["route_id"])
    |> sort(columns: ["hop","_time"], desc: false)   // hop 0 再 hop 1
    |> keep(columns: ["_time","latitude","longitude","hop","route_id"])
    |> limit(n: 5000)                                // 視需要調整

routes
