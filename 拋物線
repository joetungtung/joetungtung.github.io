太好了～現在來把「來源國（attacker）→ 台灣」的拋物線一次做起來 🎯
下面給你兩種 Flux：
①「彙總版」：每個來源國 1 條線（適合地圖乾淨、跑更順）
②「逐事件版」：每筆事件一條線（資料多時較重，建議限 Top N）
① 彙總版：每國家一條線（推薦）
效果：
src_country：來源國名
src_lat/src_lon：取該國來源點的平均座標（或最後一筆）
dst_country/dst_lat/dst_lon：固定為 Taiwan
edge_count：該來源國 → 台灣的事件數（用來做線條粗細）




import "influxdata/influxdb/schema"
import "strings"
import "math"

// 固定台灣座標
TW_LAT = 23.6978
TW_LON = 120.9605

base =
from(bucket: "SOC")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> schema.fieldsAsCols()
  |> drop(columns: ["_start","_stop","_measurement"])

// 只保留來源端座標完整（present）的事件
src_present =
base
  |> map(fn: (r) => ({
      r with
      src_country: strings.trimSpace(v: string(v: r.attacker_geo_country_name)),
      _lat_ok: exists r.src_lat and strings.trimSpace(v: string(v: r.src_lat)) != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lat))) != "nan" and float(v: string(v: r.src_lat)) != 0.0,
      _lon_ok: exists r.src_lon and strings.trimSpace(v: string(v: r.src_lon)) != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lon))) != "nan" and float(v: string(v: r.src_lon)) != 0.0
  }))
  |> filter(fn: (r) => exists r.src_country and r.src_country != "" and r.src_country != "nan")
  |> filter(fn: (r) => r._lat_ok and r._lon_ok)
  |> map(fn: (r) => ({
      r with
      src_lat: float(v: string(v: r.src_lat)),
      src_lon: float(v: string(v: r.src_lon)),
      _cnt: 1
  }))
  |> keep(columns: ["_time","src_country","src_lat","src_lon","_cnt"])

// (A) 代表座標：取最後一筆（建議；效能好）
coords_by_country =
src_present
  |> group(columns: ["src_country"])
  |> last(column: "_time")
  |> keep(columns: ["src_country","src_lat","src_lon"])

// 來源國 → Taiwan 的事件數
count_by_country =
src_present
  |> group(columns: ["src_country"])
  |> sum(column: "_cnt")
  |> rename(columns: {_cnt: "edge_count"})

// 合併 & 固定目的端為 Taiwan
join(tables: {c: coords_by_country, n: count_by_country}, on: ["src_country"])
  |> map(fn: (r) => ({
      r with
      dst_country: "Taiwan",
      dst_lat: TW_LAT,
      dst_lon: TW_LON,
      thickness: math.log(x: float(v: r.edge_count) + 1.0)
  }))
  |> sort(columns: ["edge_count"], desc: true)
  |> limit(n: 200)



② 逐事件版：每筆一條線（慎用）
效果：
每筆 present 事件都會畫一條線到台灣
可在 GeoMap 啟用動畫，看起來很有感
記得 limit，不然資料量大會卡

import "influxdata/influxdb/schema"
import "strings"

TW_LAT = 23.6978
TW_LON = 120.9605

from(bucket: "SOC")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "arcsight_event")
  |> schema.fieldsAsCols()
  |> drop(columns: ["_start","_stop","_measurement"])
  |> map(fn: (r) => ({
      r with
      src_country: strings.trimSpace(v: string(v: r.attacker_geo_country_name)),
      _lat_ok: exists r.src_lat and strings.trimSpace(v: string(v: r.src_lat)) != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lat))) != "nan" and float(v: string(v: r.src_lat)) != 0.0,
      _lon_ok: exists r.src_lon and strings.trimSpace(v: string(v: r.src_lon)) != "" and strings.toLower(v: strings.trimSpace(v: string(v: r.src_lon))) != "nan" and float(v: string(v: r.src_lon)) != 0.0
  }))
  |> filter(fn: (r) => exists r.src_country and r.src_country != "" and r.src_country != "nan")
  |> filter(fn: (r) => r._lat_ok and r._lon_ok)
  |> map(fn: (r) => ({
      r with
      src_lat: float(v: string(v: r.src_lat)),
      src_lon: float(v: string(v: r.src_lon)),
      dst_country: "Taiwan",
      dst_lat: TW_LAT,
      dst_lon: TW_LON,
      edge_count: 1
  }))
  |> keep(columns: ["_time","src_country","dst_country","src_lat","src_lon","dst_lat","dst_lon","edge_count"])
  |> sort(columns: ["_time"], desc: true)
  |> limit(n: 2000)  // 視資料量調整



Grafana GeoMap 設定（Tracks Layer）
Visualization：GeoMap
Layer：新增 Tracks
Field mapping：
Source latitude → src_lat
Source longitude → src_lon
Destination latitude → dst_lat
Destination longitude → dst_lon
Value / Thickness → edge_count（或選我準備的 thickness）
Style：
Path type：Great circle（或 Arc curvature 0.4~0.6）
Animate：On（逐事件版很適合）
Show arrows：On
Color：By value 或固定色
Tooltip：勾選 src_country, dst_country, edge_count
Time range：先用 12h / 24h；若線太多，請用 sort + limit 控制




可選的篩選/優化
只看國外 → 台灣（排除台灣作為來源端）
在 src_present 後加：

|> filter(fn: (r) => r.src_country != "Taiwan")


想把「同一來源國」線條更粗更有差異：
已在彙總版提供 thickness = log(edge_count+1)，Tracks → Thickness 指到 thickness。
若你有 src ASN / city 等欄位，也可把代表座標從 mean 改成 last()，讓線段更貼近實際點位：


// 用最後一筆座標
coords_by_country =
  src_present
    |> group(columns: ["src_country"])
    |> last(column: "_time")
    |> keep(columns: ["src_country","src_lat","src_lon"])


如果你想要同時畫「Top 10 來源國」+「其他國家合併為 Others」也可以，我再幫你加一段折疊邏輯；先把這兩個版本跑起來，你看想要哪種呈現（乾淨或更細）。
